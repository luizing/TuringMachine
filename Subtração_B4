name: Subtração_Base4
init: substituir
accept: fim

//Legenda:

	//Os números poderão ser representados por: 0=Z 1=U 2=D 3=K 
	//(3 não é "T" porque a letra já estava sendo utilizada)

//INÍCIO

//Parte em que os digitos serão "codificados" para definir qual dos números é o maior

	//Da esquerda para a direita

		//Trocar o número pela letra correspondente

substituir,0
codificar,Z,>

substituir,1
codificar,U,>

substituir,2
codificar,D,>

substituir,3
codificar,K,>

		//Mover até o final da fita

codificar,-
codificar,-,>

codificar,0
codificar,0,>

codificar,1
codificar,1,>

codificar,2
codificar,2,>

codificar,3
codificar,3,>

		//Mudar estado para voltar ao início da fita

codificar,_
substituir_a,_,<

codificar,Z
substituir_a,Z,<

codificar,U
substituir_a,U,<

codificar,D
substituir_a,D,<

codificar,K
substituir_a,K,<

	//Da direita para a esquerda
		
		//Trocar o número pela letra correspondente

substituir_a,0
codificar_a,Z,<

substituir_a,1
codificar_a,U,<

substituir_a,2
codificar_a,D,<

substituir_a,3
codificar_a,K,<

		//Voltar ao início da fita

substituir_a,-
codificar_a,-,<

codificar_a,0
codificar_ax,0,<

codificar_a,1
codificar_ax,1,<

codificar_a,2
codificar_ax,2,<

codificar_a,3
codificar_ax,3,<

codificar_a,-
checar,-,<

		//Voltar ao início da fita, mas o segundo número é maior que o primeiro

codificar_ax,0
codificar_ax,0,<

codificar_ax,1
codificar_ax,1,<

codificar_ax,2
codificar_ax,2,<

codificar_ax,3
codificar_ax,3,<

codificar_ax,-
codificar_ax-,-,<

codificar_ax-,Z
codificar_ax-,Z,<

codificar_ax-,U
codificar_ax-,U,<

codificar_ax-,D
codificar_ax-,D,<
	
codificar_ax-,K
codificar_ax-,K,<

codificar_ax-,z
codificar_ax-,z,<

codificar_ax-,u
codificar_ax-,u,<

codificar_ax-,d
codificar_ax-,d,<
	
codificar_ax-,k
codificar_ax-,k,<

codificar_ax-,-
codificar_ax-,-,<

codificar_ax-,_
inverte,_,>

codificar_ax-,0
codificar_v,0,<

codificar_ax-,1
codificar_v,1,<

codificar_ax-,2
codificar_v,2,<

codificar_ax-,3
codificar_v,3,<

		//Continua codificando os digitos

codificar_v,0
codificar_v,0,<

codificar_v,1
codificar_v,1,<

codificar_v,2
codificar_v,2,<

codificar_v,3
codificar_v,3,<

codificar_v,Z
substituir,Z,>

codificar_v,U
substituir,U,>

codificar_v,D
substituir,D,>

codificar_v,K
substituir,K,>

//Checar (ver qual número é maior)

	//Caso encontre um numero (valor da esquerda é maior)

checar,0
mover_esquerda,0,<

checar,1
mover_esquerda,1,<

checar,2
mover_esquerda,2,<

checar,3
mover_esquerda,3,<


	//Caso encontre uma letra (têm o mesmo tamanho)

checar,Z
comparar,Z,<

checar,U
comparar,U,<

checar,D
comparar,D,<

checar,K
comparar,K,<

	//comparar (Quando têm o mesmo tamanho, detecta qual o maior)

comparar,Z
comparar,Z,<

comparar,U
comparar,U,<

comparar,D
comparar,D,<

comparar,K
comparar,K,<

comparar,-
comparar,-,<

comparar,_
compararX,_,>

comparar,z
compararX,z,>

comparar,u
compararX,u,>

comparar,d
compararX,d,>

comparar,k
compararX,k,>


	//compararX (guarda o valor da maior casa para comparar com a do outro número)

compararX,Z
comparar0,z,>

compararX,U
comparar1,u,>

compararX,D
comparar2,d,>

compararX,K
comparar3,k,>

compararX,-
num_iguais,-,<


	//comparar0 (caso o maior numero seja 0)

		//Mover até a outra extremidade

comparar0,Z
comparar0,Z,>

comparar0,U
comparar0,U,>

comparar0,D
comparar0,D,>

comparar0,K
comparar0,K,>

comparar0,-
comparar0X,-,>

comparar0X,z
comparar0X,z,>

comparar0X,u
comparar0X,u,>

comparar0X,d
comparar0X,d,>

comparar0X,k
comparar0X,k,>

		//Comparações possíveis

comparar0X,Z
comparar-,z,<

comparar0X,U
codificar_ax-,U,<

comparar0X,D
codificar_ax-,D,<

comparar0X,K
codificar_ax-,K,<

	//comparar1 (caso o maior numero seja 1)

		//Mover até a outra extremidade

comparar1,Z
comparar1,Z,>

comparar1,U
comparar1,U,>

comparar1,D
comparar1,D,>

comparar1,K
comparar1,K,>

comparar1,-
comparar1X,-,>

comparar1X,z
comparar1X,z,>

comparar1X,u
comparar1X,u,>

comparar1X,d
comparar1X,d,>

comparar1X,k
comparar1X,k,>

		//Comparações possíveis

comparar1X,Z
mover_esquerda,Z,<

comparar1X,U
comparar-,u,<

comparar1X,D
codificar_ax-,D,<

comparar1X,K
codificar_ax-,K,<

	//comparar2 (caso o maior numero seja 2)

		//Mover até a outra extremidade

comparar2,Z
comparar2,Z,>

comparar2,U
comparar2,U,>

comparar2,D
comparar2,D,>

comparar2,K
comparar2,K,>

comparar2,-
comparar2X,-,>

comparar2X,z
comparar2X,z,>

comparar2X,u
comparar2X,u,>

comparar2X,d
comparar2X,d,>

comparar2X,k
comparar2X,k,>

		//Comparações possíveis

comparar2X,Z
mover_esquerda,Z,<

comparar2X,U
mover_esquerda,U,<

comparar2X,D
comparar-,d,<

comparar2X,K
codificar_ax-,K,<

	//comparar3 (caso o maior numero seja 3)

		//Mover até a outra extremidade

comparar3,Z
comparar3,Z,>

comparar3,U
comparar3,U,>

comparar3,D
comparar3,D,>

comparar3,K
comparar3,K,>

comparar3,-
comparar3X,-,>

comparar3X,z
comparar3X,z,>

comparar3X,u
comparar3X,u,>

comparar3X,d
comparar3X,d,>

comparar3X,k
comparar3X,k,>

		//Comparações possíveis

comparar3X,Z
mover_esquerda,Z,<

comparar3X,U
mover_esquerda,U,<

comparar3X,D
mover_esquerda,d,<

comparar3X,K
comparar-,k,<

	//comparar- (Volta ao digito que será comparado no número da esquerda)

comparar-,z
comparar-,z,<

comparar-,u
comparar-,u,<

comparar-,d
comparar-,d,<

comparar-,k
comparar-,k,<

comparar-,-
comparar,-,<


//mover esquerda (retorna ao inicio da fita para decodificá-la)

mover_esquerda,0
mover_esquerda,0,<

mover_esquerda,1
mover_esquerda,1,<

mover_esquerda,2
mover_esquerda,2,<

mover_esquerda,3
mover_esquerda,3,<

mover_esquerda,Z
mover_esquerda,Z,<

mover_esquerda,U
mover_esquerda,U,<

mover_esquerda,D
mover_esquerda,D,<

mover_esquerda,K
mover_esquerda,K,<

mover_esquerda,z
mover_esquerda,z,<

mover_esquerda,u
mover_esquerda,u,<

mover_esquerda,d
mover_esquerda,d,<

mover_esquerda,k
mover_esquerda,k,<

mover_esquerda,-
mover_esquerda,-,<

mover_esquerda,_
decodificar,_,>


//decodificar (traduz as letras para números)

decodificar,Z
decodificar,0,>

decodificar,U
decodificar,1,>

decodificar,D
decodificar,2,>

decodificar,K
decodificar,3,>

decodificar,z
decodificar,0,>

decodificar,u
decodificar,1,>

decodificar,d
decodificar,2,>

decodificar,k
decodificar,3,>

decodificar,-
decodificar,-,>

decodificar,0
decodificar,0,>

decodificar,1
decodificar,1,>

decodificar,2
decodificar,2,>

decodificar,3
decodificar,3,>

decodificar,_
retornar,_,<

//retornar (retorna ao inicio da fita)

retornar,0
retornar,0,<

retornar,1
retornar,1,<

retornar,2
retornar,2,<

retornar,3
retornar,3,<

retornar,-
retornar,-,<

retornar,_
mover_direita,_,>

retornar,N
mover_direita,N,>

//num_iguais (caso os dois numeros sejam iguais)

num_iguais,z
num_iguais,/,<

num_iguais,u
num_iguais,/,<

num_iguais,d
num_iguais,/,<

num_iguais,k
num_iguais,/,<

num_iguais,_
num_iguais_limpar,_,>

num_iguais_limpar,/
num_iguais_limpar,_,>

num_iguais_limpar,-
num_iguais_limpar,_,>

num_iguais_limpar,z
num_iguais_limpar,_,>

num_iguais_limpar,u
num_iguais_limpar,_,>

num_iguais_limpar,d
num_iguais_limpar,_,>

num_iguais_limpar,k
num_iguais_limpar,_,>

num_iguais_limpar,_
fim,0,<

//Subtração propriamente dita

//Ir até o fim da fita e detectar o último dígito.

mover_direita,0
mover_direita,0,>

mover_direita,1
mover_direita,1,>

mover_direita,2
mover_direita,2,>

mover_direita,3
mover_direita,3,>

mover_direita,-
mover_direita,-,>

mover_direita,T
transposição,T,<

mover_direita,Y
mover_direita,Y,>

mover_direita,X
ultimo,X,<

mover_direita,_
ultimo,_,<

//Compultar o último dígito

ultimo,0
digito_0,X,<

ultimo,1
digito_1,X,<

ultimo,2
digito_2,X,<

ultimo,3
digito_3,X,<

//Caso o ultimo digito seja 0

digito_0,0
digito_0,0,<

digito_0,1
digito_0,1,<

digito_0,2
digito_0,2,<

digito_0,3
digito_0,3,<

digito_0,-
subtração_-0,-,<

digito_0,Y
digito_0,Y,<

	//Subtrações por 0:
		//resultados de "vai 1" serão tratados mais a frente
    
subtração_-0,Y
subtração_-0,Y,<

		//0-0

subtração_-0,0
subtração_0-0,Y,>

subtração_0-0,0
subtração_0-0,0,>

subtração_0-0,1
subtração_0-0,1,>

subtração_0-0,2
subtração_0-0,2,>

subtração_0-0,3
subtração_0-0,3,>

subtração_0-0,-
subtração_0-0,-,>

subtração_0-0,Y
subtração_0-0,Y,>

subtração_0-0,X
subtração_0-0F,X,>

subtração_0-0F,X
subtração_0-0F,X,>

subtração_0-0F,_
retorna,0,<

subtração_0-0F,0
subtração_0-0X,0,<

subtração_0-0F,1
subtração_0-0X,1,<

subtração_0-0F,2
subtração_0-0X,2,<

subtração_0-0F,3
subtração_0-0X,3,<

subtração_0-0X,X
retorna,0,<

		//1-0

subtração_-0,1
subtração_1-0,Y,>

subtração_1-0,0
subtração_1-0,0,>

subtração_1-0,1
subtração_1-0,1,>

subtração_1-0,2
subtração_1-0,2,>

subtração_1-0,3
subtração_1-0,3,>

subtração_1-0,-
subtração_1-0,-,>

subtração_1-0,Y
subtração_1-0,Y,>

subtração_1-0,X
subtração_1-0F,X,>

subtração_1-0F,X
subtração_1-0F,X,>

subtração_1-0F,_
retorna,1,<

subtração_1-0F,0
subtração_1-0X,0,<

subtração_1-0F,1
subtração_1-0X,1,<

subtração_1-0F,2
subtração_1-0X,2,<

subtração_1-0F,3
subtração_1-0X,3,<

subtração_1-0X,X
retorna,1,<

		//2-0
	
subtração_-0,2
subtração_2-0,Y,>

subtração_2-0,0
subtração_2-0,0,>

subtração_2-0,1
subtração_2-0,1,>

subtração_2-0,2
subtração_2-0,2,>

subtração_2-0,3
subtração_2-0,3,>

subtração_2-0,-
subtração_2-0,-,>

subtração_2-0,Y
subtração_2-0,Y,>

subtração_2-0,X
subtração_2-0F,X,>

subtração_2-0F,X
subtração_2-0F,X,>

subtração_2-0F,_
retorna,2,<

subtração_2-0F,0
subtração_2-0X,0,<

subtração_2-0F,1
subtração_2-0X,1,<

subtração_2-0F,2
subtração_2-0X,2,<

subtração_2-0F,3
subtração_2-0X,3,<

subtração_2-0X,X
retorna,2,<

		//3-0
	
subtração_-0,3
subtração_3-0,Y,>

subtração_3-0,0
subtração_3-0,0,>

subtração_3-0,1
subtração_3-0,1,>

subtração_3-0,2
subtração_3-0,2,>

subtração_3-0,3
subtração_3-0,3,>

subtração_3-0,-
subtração_3-0,-,>

subtração_3-0,Y
subtração_3-0,Y,>

subtração_3-0,X
subtração_3-0F,X,>

subtração_3-0F,X
subtração_3-0F,X,>

subtração_3-0F,_
retorna,3,<

subtração_3-0F,0
subtração_3-0X,0,<

subtração_3-0F,1
subtração_3-0X,1,<

subtração_3-0F,2
subtração_3-0X,2,<

subtração_3-0F,3
subtração_3-0X,3,<

subtração_3-0X,X
retorna,3,<

//Caso o ultimo digito seja 1

subtração_-1,Y
subtração_-1,Y,<

digito_1,0
digito_1,0,<

digito_1,1
digito_1,1,<

digito_1,2
digito_1,2,<

digito_1,3
digito_1,3,<

digito_1,-
subtração_-1,-,<

	//1-1
    
subtração_-1,1
subtração_1-1,Y,>

subtração_1-1,0
subtração_1-1,0,>

subtração_1-1,1
subtração_1-1,1,>

subtração_1-1,2
subtração_1-1,2,>

subtração_1-1,3
subtração_1-1,3,>

subtração_1-1,-
subtração_1-1,-,>

subtração_1-1,Y
subtração_1-1,Y,>

subtração_1-1,X
subtração_1-1F,X,>

subtração_1-1F,X
subtração_1-1F,X,>

subtração_1-1F,_
retorna,0,<

subtração_1-1F,0
subtração_1-1X,0,<

subtração_1-1F,1
subtração_1-1X,1,<

subtração_1-1F,2
subtração_1-1X,2,<

subtração_1-1F,3
subtração_1-1X,3,<

subtração_1-1X,X
retorna,0,<

	//2-1

subtração_-1,2
subtração_2-1,Y,>

subtração_2-1,0
subtração_2-1,0,>

subtração_2-1,1
subtração_2-1,1,>

subtração_2-1,2
subtração_2-1,2,>

subtração_2-1,3
subtração_2-1,3,>

subtração_2-1,-
subtração_2-1,-,>

subtração_2-1,Y
subtração_2-1,Y,>

subtração_2-1,X
subtração_2-1F,X,>

subtração_2-1F,X
subtração_2-1F,X,>

subtração_2-1F,_
retorna,1,<

subtração_2-1F,0
subtração_2-1X,0,<

subtração_2-1F,1
subtração_2-1X,1,<

subtração_2-1F,2
subtração_2-1X,2,<

subtração_2-1F,3
subtração_2-1X,3,<

subtração_2-1X,X
retorna,1,<

	//3-1

subtração_-1,3
subtração_3-1,Y,>

subtração_3-1,0
subtração_3-1,0,>

subtração_3-1,1
subtração_3-1,1,>

subtração_3-1,2
subtração_3-1,2,>

subtração_3-1,3
subtração_3-1,3,>

subtração_3-1,-
subtração_3-1,-,>

subtração_3-1,Y
subtração_3-1,Y,>

subtração_3-1,X
subtração_3-1F,X,>

subtração_3-1F,X
subtração_3-1F,X,>

subtração_3-1F,_
retorna,2,<

subtração_3-1F,0
subtração_3-1X,0,<

subtração_3-1F,1
subtração_3-1X,1,<

subtração_3-1F,2
subtração_3-1X,2,<

subtração_3-1F,3
subtração_3-1X,3,<

subtração_3-1X,X
retorna,2,<

//Caso o ultimo digito seja 2

subtração_-2,Y
subtração_-2,Y,<

digito_2,0
digito_2,0,<

digito_2,1
digito_2,1,<

digito_2,2
digito_2,2,<

digito_2,3
digito_2,3,<

digito_2,-
subtração_-2,-,<

	//2-2
    
subtração_-2,2
subtração_2-2,Y,>

subtração_2-2,0
subtração_2-2,0,>

subtração_2-2,1
subtração_2-2,1,>

subtração_2-2,2
subtração_2-2,2,>

subtração_2-2,3
subtração_2-2,3,>

subtração_2-2,-
subtração_2-2,-,>

subtração_2-2,Y
subtração_2-2,Y,>

subtração_2-2,X
subtração_2-2F,X,>

subtração_2-2F,X
subtração_2-2F,X,>

subtração_2-2F,_
retorna,0,<

subtração_2-2F,0
subtração_2-2X,0,<

subtração_2-2F,1
subtração_2-2X,1,<

subtração_2-2F,2
subtração_2-2X,2,<

subtração_2-2F,3
subtração_2-2X,3,<

subtração_2-2X,X
retorna,0,<

	//3-2

subtração_-2,3
subtração_3-2,Y,>

subtração_3-2,0
subtração_3-2,0,>

subtração_3-2,1
subtração_3-2,1,>

subtração_3-2,2
subtração_3-2,2,>

subtração_3-2,3
subtração_3-2,3,>

subtração_3-2,-
subtração_3-2,-,>

subtração_3-2,Y
subtração_3-2,Y,>

subtração_3-2,X
subtração_3-2F,X,>

subtração_3-2F,X
subtração_3-2F,X,>

subtração_3-2F,_
retorna,1,<

subtração_3-2F,0
subtração_3-2X,0,<

subtração_3-2F,1
subtração_3-2X,1,<

subtração_3-2F,2
subtração_3-2X,2,<

subtração_3-2F,3
subtração_3-2X,3,<

subtração_3-2X,X
retorna,1,<

//Caso o ultimo digito seja 3

digito_3,0
digito_3,0,<

digito_3,1
digito_3,1,<

digito_3,2
digito_3,2,<

digito_3,3
digito_3,3,<

digito_3,-
subtração_-3,-,<

subtração_-3,Y
subtração_-3,Y,<

	//3-3

subtração_-3,3
subtração_3-3,Y,>

subtração_3-3,0
subtração_3-3,0,>

subtração_3-3,1
subtração_3-3,1,>

subtração_3-3,2
subtração_3-3,2,>

subtração_3-3,3
subtração_3-3,3,>

subtração_3-3,-
subtração_3-3,-,>

subtração_3-3,Y
subtração_3-3,Y,>

subtração_3-3,X
subtração_3-3F,X,>

subtração_3-3F,X
subtração_3-3F,X,>

subtração_3-3F,_
retorna,0,<

subtração_3-3F,0
subtração_3-3X,0,<

subtração_3-3F,1
subtração_3-3X,1,<

subtração_3-3F,2
subtração_3-3X,2,<

subtração_3-3F,3
subtração_3-3X,3,<

subtração_3-3X,X
retorna,0,<

//Casos de "vai 1"
  //0-
	//0-1

subtração_-1,0
subtração_0-1,Y,>

subtração_0-1,0
subtração_0-1,0,>

subtração_0-1,1
subtração_0-1,1,>

subtração_0-1,2
subtração_0-1,2,>

subtração_0-1,3
subtração_0-1,3,>

subtração_0-1,-
subtração_0-1,-,>

subtração_0-1,Y
subtração_0-1,Y,>

subtração_0-1,X
subtração_0-1F,X,>

subtração_0-1F,X
subtração_0-1F,X,>

subtração_0-1F,_
vai_1,3,<

subtração_0-1F,0
subtração_0-1X,0,<

subtração_0-1F,1
subtração_0-1X,1,<

subtração_0-1F,2
subtração_0-1X,2,<

subtração_0-1F,3
subtração_0-1X,3,<

subtração_0-1X,X
vai_1,3,<

	//0-2

subtração_-2,0
subtração_0-2,Y,>

subtração_0-2,0
subtração_0-2,0,>

subtração_0-2,1
subtração_0-2,1,>

subtração_0-2,2
subtração_0-2,2,>

subtração_0-2,3
subtração_0-2,3,>

subtração_0-2,-
subtração_0-2,-,>

subtração_0-2,Y
subtração_0-2,Y,>

subtração_0-2,X
subtração_0-2F,X,>

subtração_0-2F,X
subtração_0-2F,X,>

subtração_0-2F,_
vai_1,2,<

subtração_0-2F,0
subtração_0-2X,0,<

subtração_0-2F,1
subtração_0-2X,1,<

subtração_0-2F,2
subtração_0-2X,2,<

subtração_0-2F,3
subtração_0-2X,3,<

subtração_0-2X,X
vai_1,2,<

	//0-3

subtração_-3,0
subtração_0-3,Y,>

subtração_0-3,0
subtração_0-3,0,>

subtração_0-3,1
subtração_0-3,1,>

subtração_0-3,2
subtração_0-3,2,>

subtração_0-3,3
subtração_0-3,3,>

subtração_0-3,-
subtração_0-3,-,>

subtração_0-3,Y
subtração_0-3,Y,>

subtração_0-3,X
subtração_0-3F,X,>

subtração_0-3F,X
subtração_0-3F,X,>

subtração_0-3F,_
vai_1,1,<

subtração_0-3F,0
subtração_0-3X,0,<

subtração_0-3F,1
subtração_0-3X,1,<

subtração_0-3F,2
subtração_0-3X,2,<

subtração_0-3F,3
subtração_0-3X,3,<

subtração_0-3X,X
vai_1,1,<

  //1-
	//1-2

subtração_-2,1
subtração_1-2,Y,>

subtração_1-2,0
subtração_1-2,0,>

subtração_1-2,1
subtração_1-2,1,>

subtração_1-2,2
subtração_1-2,2,>

subtração_1-2,3
subtração_1-2,3,>

subtração_1-2,-
subtração_1-2,-,>

subtração_1-2,Y
subtração_1-2,Y,>

subtração_1-2,X
subtração_1-2F,X,>

subtração_1-2F,X
subtração_1-2F,X,>

subtração_1-2F,_
vai_1,3,<

subtração_1-2F,0
subtração_1-2X,0,<

subtração_1-2F,1
subtração_1-2X,1,<

subtração_1-2F,2
subtração_1-2X,2,<

subtração_1-2F,3
subtração_1-2X,3,<

subtração_1-2X,X
vai_1,3,<

	//1-3

subtração_-3,1
subtração_1-3,Y,>

subtração_1-3,0
subtração_1-3,0,>

subtração_1-3,1
subtração_1-3,1,>

subtração_1-3,2
subtração_1-3,2,>

subtração_1-3,3
subtração_1-3,3,>

subtração_1-3,-
subtração_1-3,-,>

subtração_1-3,Y
subtração_1-3,Y,>

subtração_1-3,X
subtração_1-3F,X,>

subtração_1-3F,X
subtração_1-3F,X,>

subtração_1-3F,_
vai_1,2,<

subtração_1-3F,0
subtração_1-3X,0,<

subtração_1-3F,1
subtração_1-3X,1,<

subtração_1-3F,2
subtração_1-3X,2,<

subtração_1-3F,3
subtração_1-3X,3,<

subtração_1-3X,X
vai_1,2,<	

  //2-
	//2-3

subtração_-3,2
subtração_2-3,Y,>

subtração_2-3,0
subtração_2-3,0,>

subtração_2-3,1
subtração_2-3,1,>

subtração_2-3,2
subtração_2-3,2,>

subtração_2-3,3
subtração_2-3,3,>

subtração_2-3,-
subtração_2-3,-,>

subtração_2-3,Y
subtração_2-3,Y,>

subtração_2-3,X
subtração_2-3F,X,>

subtração_2-3F,X
subtração_2-3F,X,>

subtração_2-3F,_
vai_1,3,<

subtração_2-3F,0
subtração_2-3X,0,<

subtração_2-3F,1
subtração_2-3X,1,<

subtração_2-3F,2
subtração_2-3X,2,<

subtração_2-3F,3
subtração_2-3X,3,<

subtração_2-3X,X
vai_1,3,<

//Função "vai_1"

	//"vai_1" somando no termo da direita

vai_1,X
vai_1,X,<

vai_1,0
retorna,1,<

vai_1,1
retorna,2,<

vai_1,2
retorna,3,<

vai_1,3
vai_1*,3,<

vai_1,-
vai_1-,-,<

	//"vai_1" subtraindo no termo da esquerda
vai_1-,Y
vai_1-,Y,<

vai_1-,3
retorna,2,<

vai_1-,2
retorna,1,<

vai_1-,1
retorna,0,<

vai_1-,0
vai_1-,3,<

	//vai_1* (exceção quando vai 1 para o 3 e ele é o ultimo termo do numero à direita)
vai_1*,-
vai_1-,-,<

vai_1*,0
vai_1*,0,<

vai_1*,1
vai_1*,1,<

vai_1*,2
vai_1*,2,<

vai_1*,3
vai_1*,3,<

//Função "retorna" (volta ao inicio da fita)

retorna,X
retorna,X,<

retorna,Y
retorna,Y,<

retorna,0
retorna,0,<

retorna,1
retorna,1,<

retorna,2
retorna,2,<

retorna,3
retorna,3,<

retorna,-
retorna,-,<

retorna,T
retorna,T,<

retorna,_
mover_direita,_,>

retorna,N
mover_direita,N,>

//Para numeros de tamanho diferente (após a subtração, os digitos que "sobraram" do número da esquerda passam para o resultado)
ultimo,-
detector_digitos,-,<

detector_digitos,Y
detector_digitos,Y,<

detector_digitos,0
transpor_0,Y,>

detector_digitos,1
transpor_1,Y,>

detector_digitos,2
transpor_2,Y,>

detector_digitos,3
transpor_3,Y,>

detector_digitos,_
limpa_fita,_,>

detector_digitos,N
limpa_fita_N,_,>

//Transposição de digitos

	//Para o 0
    
transpor_0,Y
transpor_0,Y,>

transpor_0,X
transpor_0,X,>

transpor_0,-
transpor_0,T,>

transpor_0,T
transpor_0,T,>

transpor_0,0
digitar_0,0,<

transpor_0,1
digitar_0,1,<

transpor_0,2
digitar_0,2,<

transpor_0,3
digitar_0,3,<

digitar_0,-
retorna,0,<

digitar_0,Y
retorna,0,<

digitar_0,X
retorna,0,<

digitar_0,T
retorna,0,<

	//Para o 1

transpor_1,Y
transpor_1,Y,>

transpor_1,X
transpor_1,X,>

transpor_1,-
transpor_1,T,>

transpor_1,T
transpor_1,T,>

transpor_1,0
digitar_1,0,<

transpor_1,1
digitar_1,1,<

transpor_1,2
digitar_1,2,<

transpor_1,3
digitar_1,3,<

digitar_1,-
retorna,1,<

digitar_1,Y
retorna,1,<

digitar_1,X
retorna,1,<

digitar_1,T
retorna,1,<

	//Para o 2

transpor_2,Y
transpor_2,Y,>

transpor_2,X
transpor_2,X,>

transpor_2,-
transpor_2,T,>

transpor_2,T
transpor_2,T,>

transpor_2,0
digitar_2,0,<

transpor_2,1
digitar_2,1,<

transpor_2,2
digitar_2,2,<

transpor_2,3
digitar_2,3,<

digitar_2,-
retorna,2,<

digitar_2,Y
retorna,2,<

digitar_2,X
retorna,2,<

digitar_2,T
retorna,2,<

	//Para o 3

transpor_3,Y
transpor_3,Y,>

transpor_3,X
transpor_3,X,>

transpor_3,-
transpor_3,T,>

transpor_3,T
transpor_3,T,>

transpor_3,0
digitar_3,0,<

transpor_3,1
digitar_3,1,<

transpor_3,2
digitar_3,2,<

transpor_3,3
digitar_3,3,<

digitar_3,-
retorna,3,<

digitar_3,Y
retorna,3,<

digitar_3,X
retorna,3,<

digitar_3,T
retorna,3,<

//Extras da tranposição

transposição,Y
transposição,T,<

transposição,0
transpor_0,T,>

transposição,1
transpor_1,T,>

transposição,2
transpor_2,T,>

transposição,3
transpor_3,T,>

transposição,_
limpa_fita,_,>

transposição,N
limpa_fita_N,_,>

//Limpar a fita (deixa apenas o resultado na fita)

limpa_fita,Y
limpa_fita,_,<

limpa_fita,_
limpa_fita,_,>

limpa_fita,T
limpa_fita,_,>

limpa_fita,-
limpa_fita,_,>

limpa_fita,X
limpa_fita,_,>

limpa_fita,0
limpa_fita,_,>

limpa_fita,1
fim,1,<

limpa_fita,2
fim,2,<

limpa_fita,3
fim,3,<

//"limpa_fita_N" limpa a fita e torna o resultado negativo (deixa o resultado na fita e adiciona o sinal de negativo)

limpa_fita_N,Y
limpa_fita_N,_,<

limpa_fita_N,_
limpa_fita_N,_,>

limpa_fita_N,T
limpa_fita_N,_,>

limpa_fita_N,-
limpa_fita_N,_,>

limpa_fita_N,X
limpa_fita_N,_,>

limpa_fita_N,0
limpa_fita_N,_,>

limpa_fita_N,1
negativo,1,<

limpa_fita_N,2
negativo,2,<

limpa_fita_N,3
negativo,3,<

negativo,_
fim,-,<

//fim (coloca o cabeçote no primeiro digito do número)

fim,_
fim,_,>


//Quando o valor da direita é maior que o da esquerda, inverte os dois

inverte,z
inverte_mov0,_,>

inverte,u
inverte_mov1,_,>

inverte,d
inverte_mov2,_,>

inverte,k
inverte_mov3,_,>

inverte,Z
inverte_mov0,_,>

inverte,U
inverte_mov1,_,>

inverte,D
inverte_mov2,_,>

inverte,K
inverte_mov3,_,>

	//mover 0

inverte_mov0,z
inverte_mov0,z,>

inverte_mov0,u
inverte_mov0,u,>

inverte_mov0,d
inverte_mov0,d,>

inverte_mov0,k
inverte_mov0,k,>

inverte_mov0,Z
inverte_mov0,Z,>

inverte_mov0,U
inverte_mov0,U,>

inverte_mov0,D
inverte_mov0,D,>

inverte_mov0,K
inverte_mov0,K,>

inverte_mov0,-
inverte_mov0-,-,>

inverte_mov0-,z
inverte_mov0-,z,>

inverte_mov0-,u
inverte_mov0-,u,>

inverte_mov0-,d
inverte_mov0-,d,>

inverte_mov0-,k
inverte_mov0-,k,>

inverte_mov0-,Z
inverte_mov0-,Z,>

inverte_mov0-,U
inverte_mov0-,U,>

inverte_mov0-,D
inverte_mov0-,D,>

inverte_mov0-,K
inverte_mov0-,K,>

inverte_mov0-,-
inverte_mov0_nums,-,>

//inverte_mov0- numeros

inverte_mov0-,0
inverte_mov0-,0,>

inverte_mov0-,1
inverte_mov0-,1,>

inverte_mov0-,2
inverte_mov0-,2,>

inverte_mov0-,3
inverte_mov0-,3,>

//inverte_mov0_nums

inverte_mov0_nums,0
inverte_mov0_nums,0,>

inverte_mov0_nums,1
inverte_mov0_nums,1,>

inverte_mov0_nums,2
inverte_mov0_nums,2,>

inverte_mov0_nums,3
inverte_mov0_nums,3,>

inverte_mov0_nums,_
inverte_voltar,0,<

inverte_mov0-,_
inverte_digita0,-,>

inverte_digita0,_
inverte_voltar,0,<

	//mover 1

inverte_mov1,z
inverte_mov1,z,>

inverte_mov1,u
inverte_mov1,u,>

inverte_mov1,d
inverte_mov1,d,>

inverte_mov1,k
inverte_mov1,k,>

inverte_mov1,Z
inverte_mov1,Z,>

inverte_mov1,U
inverte_mov1,U,>

inverte_mov1,D
inverte_mov1,D,>

inverte_mov1,K
inverte_mov1,K,>

inverte_mov1,-
inverte_mov1-,-,>

inverte_mov1-,z
inverte_mov1-,z,>

inverte_mov1-,u
inverte_mov1-,u,>

inverte_mov1-,d
inverte_mov1-,d,>

inverte_mov1-,k
inverte_mov1-,k,>

inverte_mov1-,Z
inverte_mov1-,Z,>

inverte_mov1-,U
inverte_mov1-,U,>

inverte_mov1-,D
inverte_mov1-,D,>

inverte_mov1-,K
inverte_mov1-,K,>

inverte_mov1-,-
inverte_mov1_nums,-,>

//inverte_mov1- numeros

inverte_mov1-,0
inverte_mov1-,0,>

inverte_mov1-,1
inverte_mov1-,1,>

inverte_mov1-,2
inverte_mov1-,2,>

inverte_mov1-,3
inverte_mov1-,3,>

//inverte_mov1_nums

inverte_mov1_nums,0
inverte_mov1_nums,0,>

inverte_mov1_nums,1
inverte_mov1_nums,1,>

inverte_mov1_nums,2
inverte_mov1_nums,2,>

inverte_mov1_nums,3
inverte_mov1_nums,3,>

inverte_mov1_nums,_
inverte_voltar,1,<

inverte_mov1-,_
inverte_digita1,-,>

inverte_digita1,_
inverte_voltar,1,<

	//mover 2

inverte_mov2,z
inverte_mov2,z,>

inverte_mov2,u
inverte_mov2,u,>

inverte_mov2,d
inverte_mov2,d,>

inverte_mov2,k
inverte_mov2,k,>

inverte_mov2,Z
inverte_mov2,Z,>

inverte_mov2,U
inverte_mov2,U,>

inverte_mov2,D
inverte_mov2,D,>

inverte_mov2,K
inverte_mov2,K,>

inverte_mov2,-
inverte_mov2-,-,>

inverte_mov2-,z
inverte_mov2-,z,>

inverte_mov2-,u
inverte_mov2-,u,>

inverte_mov2-,d
inverte_mov2-,d,>

inverte_mov2-,k
inverte_mov2-,k,>

inverte_mov2-,Z
inverte_mov2-,Z,>

inverte_mov2-,U
inverte_mov2-,U,>

inverte_mov2-,D
inverte_mov2-,D,>

inverte_mov2-,K
inverte_mov2-,K,>

inverte_mov2-,-
inverte_mov2_nums,-,>

//inverte_mov2- numeros

inverte_mov2-,0
inverte_mov2-,0,>

inverte_mov2-,1
inverte_mov2-,1,>

inverte_mov2-,2
inverte_mov2-,2,>

inverte_mov2-,3
inverte_mov2-,3,>

//inverte_mov2_nums

inverte_mov2_nums,0
inverte_mov2_nums,0,>

inverte_mov2_nums,1
inverte_mov2_nums,1,>

inverte_mov2_nums,2
inverte_mov2_nums,2,>

inverte_mov2_nums,3
inverte_mov2_nums,3,>

inverte_mov2_nums,_
inverte_voltar,2,<

inverte_mov2-,_
inverte_digita2,-,>

inverte_digita2,_
inverte_voltar,2,<

	//mover 3

inverte_mov3,z
inverte_mov3,z,>

inverte_mov3,u
inverte_mov3,u,>

inverte_mov3,d
inverte_mov3,d,>

inverte_mov3,k
inverte_mov3,k,>

inverte_mov3,Z
inverte_mov3,Z,>

inverte_mov3,U
inverte_mov3,U,>

inverte_mov3,D
inverte_mov3,D,>

inverte_mov3,K
inverte_mov3,K,>

inverte_mov3,-
inverte_mov3-,-,>

inverte_mov3-,z
inverte_mov3-,z,>

inverte_mov3-,u
inverte_mov3-,u,>

inverte_mov3-,d
inverte_mov3-,d,>

inverte_mov3-,k
inverte_mov3-,k,>

inverte_mov3-,Z
inverte_mov3-,Z,>

inverte_mov3-,U
inverte_mov3-,U,>

inverte_mov3-,D
inverte_mov3-,D,>

inverte_mov3-,K
inverte_mov3-,K,>

inverte_mov3-,-
inverte_mov3_nums,-,>

//inverte_mov3- numeros

inverte_mov3-,0
inverte_mov3-,0,>

inverte_mov3-,1
inverte_mov3-,1,>

inverte_mov3-,2
inverte_mov3-,2,>

inverte_mov3-,3
inverte_mov3-,3,>

//inverte_mov3_nums

inverte_mov3_nums,0
inverte_mov3_nums,0,>

inverte_mov3_nums,1
inverte_mov3_nums,1,>

inverte_mov3_nums,2
inverte_mov3_nums,2,>

inverte_mov3_nums,3
inverte_mov3_nums,3,>

inverte_mov3_nums,_
inverte_voltar,3,<

inverte_mov3-,_
inverte_digita3,-,>

inverte_digita3,_
inverte_voltar,3,<

//inverte_voltar (volta ao inicio da função para continuar a inverter os números)

inverte_voltar,-
inverte_voltar,-,<

inverte_voltar,z
inverte_voltar,z,<

inverte_voltar,u
inverte_voltar,u,<

inverte_voltar,d
inverte_voltar,d,<

inverte_voltar,k
inverte_voltar,k,<

inverte_voltar,Z
inverte_voltar,Z,<

inverte_voltar,U
inverte_voltar,U,<

inverte_voltar,D
inverte_voltar,D,<

inverte_voltar,K
inverte_voltar,K,<

inverte_voltar,0
inverte_voltar,0,<

inverte_voltar,1
inverte_voltar,1,<

inverte_voltar,2
inverte_voltar,2,<

inverte_voltar,3
inverte_voltar,3,<

inverte_voltar,_
inverte,_,>

inverte,-
decodificar,N,>

//Luiz Eduardo Alves Camurça - 508200
